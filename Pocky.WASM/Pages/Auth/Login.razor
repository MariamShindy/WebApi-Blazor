@page "/login"
@using Pocky.WASM.Identity
@using Pocky.WASM.Models
@inject IAccountManagement AccountManagement
@inject NavigationManager Navigation

<div class="col-12 col-md-5 col-lg-4">
	<div class="card card-shadow border-0 rounded-3">
		<div class="card-body p-4">
			<div class="row g-6">
				<div class="col-12">
					<div class="text-center">
						<h3 class="fw-bold fs-5 mb-2">Sign In</h3>
						<p class="text-muted">Login to your account</p>
					</div>
				</div>
			</div>
			<EditForm Model="loginModel" OnValidSubmit="Submit">
				<DataAnnotationsValidator></DataAnnotationsValidator>
				<div class="form-floating mb-4">
					<InputText @bind-Value ="loginModel!.Email" type="email"
							   class="form-control rounded-2 border-0 bg-grey" id="email" placeholder="">

					</InputText>
					<label for="email">Email</label>
					<ValidationMessage For="() => loginModel.Email"></ValidationMessage>
				</div>
				<div class="form-floating mb-4">
					<InputText @bind-Value="loginModel!.Password" type="password"
							   class="form-control rounded-2 border-0 bg-grey" id="password" placeholder="">

					</InputText>
					<label for="password">Password</label>
					<ValidationMessage For="() => loginModel.Password"></ValidationMessage>
				</div>
				@if (isNew)
				{
					<div class="col-12">
						<div class="alert alert-success">
							<span>User created successfully!!</span>
						</div>
					</div>
				}
				<div class="col-12 @(errorList.Any() ? string.Empty :"d-none")">
					<div class="alert alert-danger">
						@foreach(var error in errorList)
						{
					    <span>@error</span>
						}
					</div>
				</div>
				<button class="btn btn-primary btn-block fs-6 fw-bolder py-3 w-100" type="submit" disabled="@loading">Sign In</button>
			</EditForm>
		</div>
	</div>
	<div class="text-center mt-4">
     <p class="text-muted">Don't have an account ? <NavLink href="/register">Sign Up</NavLink></p>
	</div>
</div>
@code {
	[SupplyParameterFromForm]
	private LoginModel? loginModel { get; set; }
	[SupplyParameterFromQuery(Name ="IsNew")]
	private bool isNew { get; set; }
	protected override void OnInitialized()
		=> loginModel ??= new();
	private string[] errorList = [];
	private bool loading = false;
	private async Task Submit()
	{
		loading = true;
		var result = await AccountManagement.LoginAsync(loginModel!);
		if (result.Succeeded)
		{
			Navigation.NavigateTo("/");
		}
		else
		{
			errorList = result.ErrorList;
		}
		loading = false;
	}
}
